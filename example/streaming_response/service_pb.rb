# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: streaming_response/service.proto

require 'google/protobuf'


descriptor_data = "\n streaming_response/service.proto\x12\x1a\x65xample.streaming_response\"%\n\x15HelloStreamingRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\")\n\x16HelloStreamingResponse\x12\x0f\n\x07message\x18\x01 \x01(\t2\x87\x01\n\x13HelloWorldStreaming\x12p\n\x05Hello\x12\x31.example.streaming_response.HelloStreamingRequest\x1a\x32.example.streaming_response.HelloStreamingResponse0\x01\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Example
  module StreamingResponse
    HelloStreamingRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("example.streaming_response.HelloStreamingRequest").msgclass
    HelloStreamingResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("example.streaming_response.HelloStreamingResponse").msgclass
  end
end
